<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Configuration

global.deadzone = 0.15

//Speed
moveSpeed = 3.5

//Iframes
iFrameLength = sec * 0.5

//Health
if global.difficulty = "casual"
{
    maxHealth = 200
    currentHealth = 150
}
else if global.difficulty = "experianced"
{
    maxHealth = 125
    currentHealth = 100
}
else
{
    maxHealth = 100
    currentHealth = 100
}
    
if global.difficulty = "casual"
    minHealth = 100
else if global.difficulty = "experianced"
    minHealth = 40
else if global.difficulty = "standard"
    minHealth = 15
else
    minHealth = 0

if global.difficulty = "casual"
    shield = 5
else if global.difficulty = "experianced"
    shield = 2
else if global.difficulty = "standard"
    shield = 1
else
    shield = 0
    
if global.difficulty = "casual"
    shieldMax = 5
else if global.difficulty = "experianced"
    shieldMax = 3
else if global.difficulty = "standard"
    shieldMax = 1
else
    shieldMax = 0

    
if global.gameMode = "pvp"
    shieldMax = 3
    
minHealthStart = minHealth
maxHealthStart = maxHealth

//Damage
greenDamage = 34
blueDamage = 6
yellowDamage = 11
redDamage = 8
redDamageB = 20
whiteDamage = 10

//Firerate
greenReloadTime = floor(1.2 * sec)
blueReloadTime = floor(0.15 * sec)
yellowReloadTime = floor(0.75 * sec)
redReloadTime = floor(0.9 * sec)
whiteReloadTime = floor(0.6 * sec)

//Ammo Regen Rate
RegenRate = 5
greenRegenTime = floor(greenReloadTime * RegenRate / 1.5)
blueRegenTime = floor(blueReloadTime * RegenRate)
yellowRegenTime = floor(yellowReloadTime * RegenRate)
redRegenTime = floor(redReloadTime* RegenRate/ 1.5)

//Weapon Recoil
RecoilArrayDist[0] = 0
RecoilArrayDist[WGREEN] = 40
RecoilArrayDist[WBLUE] = 10
RecoilArrayDist[WYELLOW] = 23
RecoilArrayDist[WRED] = 30
RecoilArrayTime[0] = 0
RecoilArrayTime[WGREEN] = floor(0.15 * sec)
RecoilArrayTime[WBLUE] = floor(0.12 * sec)
RecoilArrayTime[WYELLOW] = floor(0.2 * sec)
RecoilArrayTime[WRED] = floor(0.32 * sec)
weaponSuperMaxRecoil = 0.4 * sec
weaponSuperMaxDistRecoil = 40

//WeaponCharacteristics
yellowPellets = 5
yellowAngle = 10

//Weapon Colors
green = make_color_rgb(103, 201, 49)
blue = make_color_rgb(57, 102, 206)
yellow = make_color_rgb(230, 192, 81)
red = make_color_rgb(199, 49, 49)

//Default Controls
if global.gp &gt; 0
{
    b_g = gp_face1
    b_b = gp_face3
    b_y = gp_face4
    b_r = gp_face2
    b_w = gp_stickr
    b_shoot = gp_shoulderrb
    b_aim = gp_shoulderlb
    b_shoot2 = gp_shoulderlb
    b_consume1 = gp_shoulderl
    b_consume2 = gp_face1
    b_nextweapon = gp_shoulderr
    b_prevweapon = gp_shoulderl
    b_interact = gp_face1
}
else
{
    b_left = ord("A")
    b_right = ord("D")
    b_up = ord("W")
    b_down = ord("S")
    b_shoot = mb_left
    b_shoot2 = mb_right
    b_aim = mb_right
    b_consume1 = ord("Q")
    b_consume2 = vk_shift
    b_g = ord("1")
    b_b = ord("2")
    b_y = ord("3")
    b_r = ord("4")
    b_nextweapon = ord("E")
    b_prevweapon = ord("Q")
    b_interact = ord("E")
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Vars
image_speed = 0

if global.hardcore = 1
{
    redBounceDamage = 1.50
    redPierceDamage = 1.25
    greenBounceDamage = 1.50
    greenPierceDamage = 1
    blueBounceDamage = 1.50
    bluePierceDamage = 1.25
    yellowBounceDamage = 1
    yellowPierceDamage = 1.25
}
else
{
    redBounceDamage = 1
    redPierceDamage = 1
    greenBounceDamage = 1
    greenPierceDamage = 1
    blueBounceDamage = 1
    bluePierceDamage = 1
    yellowBounceDamage = 1
    yellowPierceDamage = 1
}
aimDirection = 0
weaponSelect = -1
hit = 0
quadDamage = 1
quadTimer = 0
gold = 0
speedBonus = 0
invulnerable = 0
aimLength = 60
weapon = WGREEN
point = noone
consume = "none"
unlimitedAmmo = 0
yellowCoin = 0
consumeName = ""
consumeDesc = ""
consumeTimer = 0
twiceConsume = 0
twiceConsumeStatus = 0
damageResist = 0
aimDirection = 0
aimTarget = noone
xAim = 0
yAim = 0
message = ""
shieldBad3B = 0
shieldFire = 0
blipTime = 0.08 * sec
blipColor = c_gray
imageColor = c_white
statue = 0
tilt = 0

if global.gameMode = "coop"
{
    greenAmmo = global.greenAmmoMax
    blueAmmo = global.blueAmmoMax
    yellowAmmo = global.yellowAmmoMax
    redAmmo = global.redAmmoMax
}

if global.gameMode = "pvp"
{
    greenAmmo = 0
    blueAmmo = 15
    yellowAmmo = 1
    redAmmo = 1
}

greenAmmoMaxBase = greenAmmo
blueAmmoMaxBase = blueAmmo
yellowAmmoMaxBase = yellowAmmo
redAmmoMaxBase = redAmmo

greenReload = 0
blueReload = 0
yellowReload = 0
redReload = 0
whiteReload = 0

greenSwitch = 0
blueSwitch = 0
yellowSwitch = 0
redSwitch = 0
whiteSwitch = 0

greenReloadTimeBase = greenReloadTime
blueReloadTimeBase = blueReloadTime
yellowReloadTimeBase = yellowReloadTime
redReloadTimeBase = redReloadTime
whiteReloadTimeBase = whiteReloadTime

greenDamageBase = greenDamage
blueDamageBase = blueDamage
yellowDamageBase = yellowDamage
redDamageBase = redDamage
redDamageBaseB = redDamageB

greenRegen = 0
blueRegen = 0
yellowRegen = 0
redRegen = 0

greenBounces = 0
blueBounces  = 0
yellowBounces  = 4
redBounces  = 0
whiteBounces = 0

greenPierces = 4
bluePierces  = 0
yellowPierces  = 0
redPierces  = 0
whitePierces = 0

mpGreen = 0
mpBlue = 0
mpYellow = 0
mpRed = 0
mpWhite = 0

greenWall = 0
greenBurst = 0
greenBursted = 0
blueHalt = 0
blueCross = 0
yellow7 = 0
yellowSpread = 0
redSelf = 0
redRadius = 0

damageCount = 0

weaponRecoilDist = 0
weaponRecoil = 0
weaponMaxRecoil = 0
weaponRecoilX = 0
weaponRecoilY = 0
weaponMaxDistRecoil = 0

if global.gp = 0
    itemPrompt = 6
else
    itemPrompt = 0

global.part = part_system_create()
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Options

ini_open("options")
crosshairType = ini_read_string(string(PID), "crosshairType", "default")
aimAssist = ini_read_string(string(PID), "aimAssist", "low")
weaponSelectType = ini_read_string(string(PID), "weaponSelectType", "cycle")
ini_close()

if global.gp = 0
{
    aimAssist = "low"
    crosshairType = "pc"
    weaponSelectType = "pc"
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gamepad_set_vibration(gamepadID,0,0)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>imageColor = c_white
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hit = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if greenBursted = 0
{
    greenReload = 0
    greenBursted = 1
    show_debug_message("burst")
}
else if greenBursted = 1
{
    show_debug_message("burstEnd")
    greenBursted = 2
}

/*switch (greenBursted)
{
    case 0:
        greenReload = 0
        greenBursted = 1
    break;
    
    case 1:
        greenBursted = 2
    break;
}
 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>message = ""

damageCount = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>invulnerable = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gamepad_set_vibration(gamepadID, 0, 0)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Wind
windO = obj_wind_controller
windX = 0
windY = 0
if instance_exists(windO) and windO.wind = 1
{
    if windO.windDirection = "left"
    {
        windX = -1
        windY = 0
    }
    if windO.windDirection = "right"
    {
        windX = 1
        windY = 0
    }
    
    if windO.windDirection = "up"
    {
        windX = 0
        windY = -1
    }
    
    if windO.windDirection = "down"
    {
        windX = 0
        windY = 1
    }

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement

///Controller Movement
if global.gp &gt; 0
{
    moveHorInput = gamepad_axis_value(gamepadID, gp_axislh)
    moveVertInput = gamepad_axis_value(gamepadID, gp_axislv)

    if abs(moveHorInput) &lt; global.deadzone
        moveHorInput = 0
        
    if abs(moveVertInput) &lt; global.deadzone
        moveVertInput = 0
}
else
{
    moveHorInput = keyboard_check(b_right) - keyboard_check(b_left)
    moveVertInput = keyboard_check(b_down) - keyboard_check(b_up)
}

if place_meeting(x, y, obj_9bad_slow)
{
    xSpeed = (1.5) * moveHorInput
    ySpeed = (1.5) * moveVertInput
}
else
{
    xSpeed = (moveSpeed + speedBonus) * moveHorInput
    ySpeed = (moveSpeed + speedBonus) * moveVertInput
}

if abs(xSpeed) &gt; 0.4
    xSpeed += windX * 0.7
if abs(ySpeed) &gt; 0.4
    ySpeed += windY * 0.7
    

if !place_meeting(x+xSpeed, y, obj_solid)
    x += xSpeed
if !place_meeting(x, y+ySpeed, obj_solid)
    y += ySpeed

if speedBonus &gt; 0
        speedBonus -= 0.03

tilt = 0
if xSpeed &gt; 0
    tilt = 3.5 * ((xSpeed - speedBonus + (speedBonus * 2.8)) / moveSpeed)
    
if xSpeed &lt; 0
    tilt = -1 * abs(3.5 * ((abs(xSpeed) - speedBonus + (speedBonus * 2.8)) / abs(moveSpeed)))
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Aim
xAim = 0
yAim = 0


////////////
if global.gp &gt; 0
{
    xAim = gamepad_axis_value(gamepadID, gp_axisrh)
    yAim = gamepad_axis_value(gamepadID, gp_axisrv)
    
    if (abs(xAim) &gt;= 0.4 or abs(yAim) &gt;= 0.4)
    {
        aimDirection = point_direction(0, 0, xAim, yAim)
        xAim = round(lengthdir_x(aimLength, aimDirection))
        yAim = round(lengthdir_y(aimLength, aimDirection))
    }
}
else
{
    
    aimDirection = point_direction(x, y, mouse_x, mouse_y)
    aimDistancePC = point_distance(x, y, mouse_x, mouse_y)
    
    xAim = round(lengthdir_x(aimDistancePC, aimDirection))
    yAim = round(lengthdir_y(aimDistancePC, aimDirection))
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Aim Assist
///Auto Target
autoAim = 0
if aimAssist = "auto"
{
    if global.arenaLock = 1
    {
        if (xAim !=0 or yAim !=0)
        {
            xiAim = round(lengthdir_x(1800, aimDirection))
            yiAim = round(lengthdir_y(1800, aimDirection))
            aimedAt = collision_line_first(x, y, x + xiAim, y + yiAim, assistTarget, 0, 1)
            if aimedAt != noone
                aimTarget = aimedAt
        }
        
        if !instance_exists(aimTarget)
            aimTarget = noone
        
        if aimTarget != noone
        {
            with assistTarget
                targeted = 0
            with aimTarget
                targeted = other.PID + 1
            
            autoAim = 1
        }
    }
}

if aimAssist = "low" or aimAssist = "high"
{
    if instance_number(assistTarget) &gt; 0
    {
        if aimAssist = "low" assistTolerance = 9
        if aimAssist = "high" assistTolerance = 18
        
        autoAim = 0
        aimTarget = noone
        i = 0
        
        with assistTarget
            targeted = 0
        
        targets = ds_grid_create(2, instance_number(assistTarget))
        with assistTarget
        {
            aDir = point_direction(other.x, other.y, x, y)
            aDif = abs(angle_difference(aDir, other.aimDirection))
            
            ds_grid_add(other.targets, 0, other.i, self)
            ds_grid_add(other.targets, 1, other.i, aDif)
            
            other.i++
        }
        
        ds_grid_sort(targets, 1, 1)
        
        
        if ds_grid_get(targets, 1, 0) &lt; assistTolerance
        {
            aimTarget = ds_grid_get(targets, 0, 0)  
        
            if !instance_exists(aimTarget)
                aimTarget = noone
        
            if aimTarget != noone
                autoAim = 1
        }
        
        ds_grid_destroy(targets)
    }
}
//if global.gp = 0 
    //aimAssist = "off"
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shoot
////Weapons
//Rifle

//Keyboard Support
/*if global.gp &gt; 0
    shootdir = diraim
else
    shootdir = point_direction(x, y, mouse_x, mouse_y)*/

quadDamage = 1
if quadTimer &gt; 0
    quadDamage = 4

shootPressed = 0

if global.gp &gt; 0 and gamepad_button_check(gamepadID, b_shoot)
    shootPressed = 1
else if global.gp = 0 and mouse_check_button(b_shoot)
    shootPressed = 1

if shootPressed
{
    if weapon = WGREEN
    {
    if greenReload &lt;= 0 and (greenAmmo &gt; 0 or unlimitedAmmo &gt; 0)
        {
            if autoAim = 1
                if aimTarget != noone
                    aimDirection = intercept_course(self, aimTarget, 24)
           with instance_create(x, y, obj_rbullet)
           {
                playerID = other.id
                greenWall = other.greenWall
                bounces = other.greenBounces
                damage = other.greenDamage * other.quadDamage
                xSpeed = other.xSpeed
                ySpeed = other.ySpeed
                direction = other.aimDirection
                bounceDamage = other.greenBounceDamage
                pierceDamage = other.greenPierceDamage
           }
            if global.mp = 1 and instance_exists(partnerID) and partnerID.weapon = WGREEN and global.gameMode = "coop"
                greenReload = greenReloadTime// * 2
            else
                greenReload = greenReloadTime
                
            greenSwitch = greenReloadTime
                
            if greenBursted = 2
                greenBursted = 0
                
            if greenBurst = 1
                alarm[4] = sec * 0.06
                    
            if unlimitedAmmo = 0
                greenAmmo -= 1
            //if global.mp = 1 and instance_exists(partnerID) and global.gameMode = "coop" and global.hardcore = 1
                //partnerID.greenAmmo += 1
                
            audio_play_sound(greenFire, 5, 0)
            
            weaponMaxRecoil = clamp(weaponMaxRecoil + RecoilArrayTime[WGREEN], 0, weaponSuperMaxRecoil)
            weaponMaxDistRecoil = clamp(weaponMaxDistRecoil + RecoilArrayDist[WGREEN], 0, weaponSuperMaxDistRecoil)
        }
    }
    
    if weapon = WBLUE
    {
        if blueReload &lt;= 0 and (blueAmmo &gt; 0 or unlimitedAmmo &gt; 0)
        {
            if autoAim = 1
                if aimTarget != noone
                    aimDirection = intercept_course(self, aimTarget, 8)
            blueDir = 0
            repeat(1 + (blueCross * 3))
                with instance_create(x, y, obj_mbullet)
                {
                    playerID = other.id
                    blueHalt = other.blueHalt
                    bounces = other.blueBounces
                    pierces = other.bluePierces
                    damage = other.blueDamage * other.quadDamage
                    xSpeed = other.xSpeed
                    ySpeed = other.ySpeed
                    direction = other.aimDirection + other.blueDir
                    other.blueDir += 90
                    bounceDamage = other.blueBounceDamage
                    pierceDamage = other.bluePierceDamage
                }
            
            if global.mp = 1 and instance_exists(partnerID) and partnerID.weapon = WBLUE and global.gameMode = "coop"
                blueReload = blueReloadTime// * 2
            else
                blueReload = blueReloadTime
                
            bluwSwitch = blueReloadTime
            if unlimitedAmmo = 0
                blueAmmo -= 1
            //if global.mp = 1 and instance_exists(partnerID) and global.gameMode = "coop" and global.hardcore = 1
                //partnerID.blueAmmo += 1
            audio_play_sound(blueFire, 5, 0)
            weaponMaxRecoil = clamp(0 + RecoilArrayTime[WBLUE], 0, weaponSuperMaxRecoil)
            weaponMaxDistRecoil = clamp(weaponMaxDistRecoil + RecoilArrayDist[WBLUE], 0, weaponSuperMaxDistRecoil)
        }
            
    }
    
    if weapon = WYELLOW
    {
        if yellowReload &lt;= 0 and (yellowAmmo &gt; 0 or unlimitedAmmo &gt; 0)
        {
            if autoAim = 1
                if aimTarget != noone
                    aimDirection = intercept_course(self, aimTarget, 12)
            angle = -(yellowAngle * (2 + yellow7))
            repeat (yellowPellets + (2 * yellow7))
            {
                if yellowCoin = 0
                {
                    with instance_create(x, y, obj_sbullet)
                    {
                        playerID = other.id
                        pierces = other.yellowPierces
                        damage = other.yellowDamage * other.quadDamage
                        xSpeed = other.xSpeed
                        ySpeed = other.ySpeed
                        direction = other.aimDirection + other.angle
                        bounceDamage = other.yellowBounceDamage
                        pierceDamage = other.yellowPierceDamage
                    }
                }
                else
                {
                    with instance_create(x, y, obj_coin)
                    {
                        value = 1
                        direction = other.aimDirection + other.angle
                        speed = 8
                        consume = 1
                    }
                }
                angle += yellowAngle
           }
                
           if global.mp = 1 and instance_exists(partnerID) and partnerID.weapon = WYELLOW and global.gameMode = "coop"
                yellowReload = yellowReloadTime// * 2
            else
                yellowReload = yellowReloadTime
                
            yellowSwitch = yellowReloadTime
           if unlimitedAmmo = 0
            yellowAmmo -= 1
           //if global.mp = 1 and instance_exists(partnerID) and global.gameMode = "coop" and global.hardcore = 1
                   // partnerID.yellowAmmo += 1
           audio_sound_gain(yellowFire, 1.2, 0)
           audio_play_sound(yellowFire, 5, 0)
           weaponMaxRecoil = clamp(weaponMaxRecoil + RecoilArrayTime[WYELLOW], 0, weaponSuperMaxRecoil)
            weaponMaxDistRecoil = clamp(weaponMaxDistRecoil + RecoilArrayDist[WYELLOW], 0, weaponSuperMaxDistRecoil)
        }
    }
    
    if weapon = WRED
    {
        if redReload &lt;= 0 and (redAmmo &gt; 0 or unlimitedAmmo &gt; 0)
        {
            /*if autoAim = 1
                if aimTarget != noone
                    aimDirection = intercept_course(self, aimTarget, 6)*/
            with instance_create(x, y, obj_gbullet)
               {
                    playerID = other.id
                    redRadius = other.redRadius
                    bounces = other.redBounces
                    pierces = other.redPierces
                    damage = other.redDamage * other.quadDamage
                    damageB = other.redDamageB * other.quadDamage
                    xSpeed = other.xSpeed
                    ySpeed = other.ySpeed
                    direction = other.aimDirection
                    bounceDamage = other.redBounceDamage
                    pierceDamage = other.redPierceDamage
               }
               
            if redSelf = 1
                with instance_create(x,y,obj_gexplosion_damage)
                {
                    playerID = other.id
                    damage = other.redDamageB
                }
            
            if global.mp = 1 and instance_exists(partnerID) and partnerID.weapon = WRED and global.gameMode = "coop"
                redReload = redReloadTime// * 2
            else
                redReload = redReloadTime
                
            redSwitch = redReloadTime
            if unlimitedAmmo = 0
                redAmmo -= 1
            //if global.mp = 1 and instance_exists(partnerID) and global.gameMode = "coop" and global.hardcore = 1
                //partnerID.redAmmo += 1
            audio_play_sound(redFire, 5, 0)
            weaponMaxRecoil = clamp(weaponMaxRecoil + RecoilArrayTime[WRED], 0, weaponSuperMaxRecoil)
            weaponMaxDistRecoil = clamp(weaponMaxDistRecoil + RecoilArrayDist[WRED], 0, weaponSuperMaxDistRecoil)
        }
            
    }
    
    if weapon = WWHITE
    {
    if whiteReload &lt;= 0
        {
            if autoAim = 1
                if aimTarget != noone
                    aimDirection = intercept_course(self, aimTarget, 24)
           with instance_create(x, y, obj_wbullet)
           {
                playerID = other.id
                damage = other.whiteDamage * other.quadDamage
                bounces = other.whiteBounces
                pierces = other.whitePierces
                xSpeed = other.xSpeed
                ySpeed = other.ySpeed
                direction = other.aimDirection
           }
            whiteReload = whiteReloadTime
                
            whiteSwitch = 1
 
            audio_play_sound(greenFire, 5, 0)
        }
    }
} 
        
        

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Recoil
if weaponMaxRecoil != 0
{
    weaponRecoil += 1
    if weaponRecoil &lt; weaponMaxRecoil/2
    {
        weaponRecoilDist += 1
        weaponRecoilRealDist = power(weaponRecoilDist/weaponMaxRecoil*2, 3) * -weaponMaxDistRecoil
    }
    if weaponRecoil &gt;= weaponMaxRecoil/2
    {
        weaponRecoilDist -= 1
        weaponRecoilRealDist = power(weaponRecoilDist/weaponMaxRecoil*2, 1) * -weaponMaxDistRecoil
    }
    
    if weaponRecoil &gt;= weaponMaxRecoil
    {
        weaponRecoilDist = 0
        weaponRecoilRealDist = 0
        weaponRecoil = 0
        weaponMaxRecoil = 0
        weaponMaxDistRecoil = 0
    }

    if weaponRecoil != 0
    {
    
    
        weaponRecoilX = lengthdir_x(weaponRecoilRealDist, aimDirection)
        weaponRecoilY = lengthdir_y(weaponRecoilRealDist, aimDirection)
    
    }
    else
    {
        weaponRecoilX = 0
        weaponRecoily = 0
    }
}
else
{
    weaponRecoilX = 0
    weaponRecoily = 0
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reload/Select
if greenReload &gt; 0
    greenReload -= 1
if blueReload &gt; 0
   blueReload -= 1
if yellowReload &gt; 0
    yellowReload -= 1
if redReload &gt; 0
    redReload -= 1
if whiteReload &gt; 0
    whiteReload -= 1
    
if greenSwitch &gt; 0
    greenSwitch -= 1
if blueSwitch &gt; 0
   blueSwitch -= 1
if yellowSwitch &gt; 0
    yellowSwitch -= 1
if redSwitch &gt; 0
    redSwitch -= 1
if whiteSwitch &gt; 0
    whiteSwitch -= 1

if global.gp &gt; 0
{
    if weaponSelectType = "direct"
    {
        if gamepad_button_check_pressed(gamepadID, b_g)
            weaponSelect = WGREEN
        if gamepad_button_check_pressed(gamepadID, b_b)
            weaponSelect = WBLUE
        if gamepad_button_check_pressed(gamepadID, b_y)
            weaponSelect = WYELLOW
        if gamepad_button_check_pressed(gamepadID, b_r)
            weaponSelect = WRED
    }
    
    if weaponSelectType = "cycle"
    {
        if gamepad_button_check_pressed(gamepadID, b_nextweapon)
        {
            weaponSelect = weapon
            switch (weaponSelect)
            {
                case WGREEN: weaponSelect = WBLUE; break;
                case WBLUE: weaponSelect = WYELLOW; break;
                case WYELLOW: weaponSelect = WRED; break;
                case WRED: weaponSelect = WGREEN; break;   
            }
        }
        if gamepad_button_check_pressed(gamepadID, b_prevweapon)
        {
            weaponSelect = weapon
            switch (weaponSelect)
            {
                case WGREEN: weaponSelect =WRED; break;
                case WRED: weaponSelect = WYELLOW; break;
                case WYELLOW: weaponSelect = WBLUE; break;
                case WBLUE: weaponSelect = WGREEN; break;   
            }
        }
    }
        
}
else
{
    if global.myControls = false
    {
        if keyboard_check_pressed(b_g)
            weaponSelect = WGREEN
        if keyboard_check_pressed(b_b)
            weaponSelect = WBLUE
        if keyboard_check_pressed(b_y)
            weaponSelect = WYELLOW
        if keyboard_check_pressed(b_r)
            weaponSelect = WRED
            
        if mouse_wheel_up()
        {
            weaponSelect = weapon
            switch (weaponSelect)
            {
                case WGREEN: weaponSelect = WBLUE; break;
                case WBLUE: weaponSelect = WYELLOW; break;
                case WYELLOW: weaponSelect = WRED; break;
                case WRED: weaponSelect = WGREEN; break;   
            }
        }
        if mouse_wheel_down()
        {
            weaponSelect = weapon
            switch (weaponSelect)
            {
                case WGREEN: weaponSelect = WRED; break;
                case WRED: weaponSelect = WYELLOW; break;
                case WYELLOW: weaponSelect = WBLUE; break;
                case WBLUE: weaponSelect = WGREEN; break;   
            }
        }
    }
    else
    {
        if keyboard_check_pressed(188)
            weaponSelect = WGREEN
        if mouse_wheel_up()
            weaponSelect = WBLUE
        if keyboard_check_pressed(190)
            weaponSelect = WYELLOW
        if mouse_wheel_down()
            weaponSelect = WRED
    }
}

image_index = 0//weapon - 1
if ((weapon = WGREEN and greenSwitch &lt;= 0) or (weapon = WBLUE and blueSwitch &lt;= 0) or (weapon = WYELLOW and yellowSwitch &lt;= 0) or (weapon = WRED and redSwitch &lt;= 0) or (weapon = WWHITE and whiteSwitch &lt;= 0) or (weaponSelect = WRED) or global.hardcore = 0) and weaponSelect != -1
{
    weapon = weaponSelect
    weaponSelect = -1
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Ammo Regen

if global.hardcore = 2//(global.mp = 0 and global.hardcore = 0) or ((global.mp = 1 and global.gameMode = "coop") and ((global.hardcore = 1 and !instance_exists(partnerID)) or (global.hardcore = 0)))
{
    if greenAmmo &lt; global.greenAmmoMax
        if greenRegen = 0
            greenRegen = greenRegenTime
            
    if blueAmmo &lt; global.blueAmmoMax
        if blueRegen = 0
            blueRegen = blueRegenTime
            
    if yellowAmmo &lt; global.yellowAmmoMax
        if yellowRegen = 0
            yellowRegen = yellowRegenTime
            
    if redAmmo &lt; global.redAmmoMax
        if redRegen = 0
            redRegen = redRegenTime
            
    if greenRegen &gt; 0
        greenRegen -= 1
    if blueRegen &gt; 0
        blueRegen -= 1
    if yellowRegen &gt; 0
        yellowRegen -= 1
    if redRegen &gt; 0
        redRegen -= 1
        
    if greenRegen = 1
        greenAmmo += 1
    if blueRegen = 1
        blueAmmo += 1
    if yellowRegen = 1
        yellowAmmo += 1
    if redRegen = 1
        redAmmo += 1
}
/*
if global.mp = 1
{
    if !instance_exists(partnerID)
    {
        if greenAmmo &lt; global.greenAmmoMax
        if greenRegen = 0
            greenRegen = greenRegenTime
            
        if blueAmmo &lt; global.blueAmmoMax
            if blueRegen = 0
                blueRegen = blueRegenTime
                
        if yellowAmmo &lt; global.yellowAmmoMax
            if yellowRegen = 0
                yellowRegen = yellowRegenTime
                
        if redAmmo &lt; global.redAmmoMax
            if redRegen = 0
                redRegen = redRegenTime
                
        if greenRegen &gt; 0
            greenRegen -= 1
        if blueRegen &gt; 0
            blueRegen -= 1
        if yellowRegen &gt; 0
            yellowRegen -= 1
        if redRegen &gt; 0
            redRegen -= 1
            
        if greenRegen = 1
            greenAmmo += 1
        if blueRegen = 1
            blueAmmo += 1
        if yellowRegen = 1
            yellowAmmo += 1
        if redRegen = 1
            redAmmo += 1
        }
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Purple Gun
/*
if global.arenaLock = 1
{
    if instance_exists(obj_room_generation)
    if obj_room_generation.totalBad &lt; 1
    {
        if gamepad_button_check_pressed(gamepadID, b_shoot2)
        {
            gamepad_set_vibration(gamepadID,0.6,0)
            alarm[1] = sec * 0.15
            if instance_number(obj_player_parent) = 1
            {
                if !instance_exists(obj_purple_orb)
                {
                    with instance_create(x, y, obj_purple_orb)
                        direction = other.aimDirection
                }
                else
                {
                    with instance_create(x, y, obj_purple_laser)
                        direction = other.aimDirection
                }
            }
            else
            {
                if object_index = obj_player1
                    with instance_create(x, y, obj_purple_orb)
                        direction = other.aimDirection
                        
                if object_index = obj_player2
                    with instance_create(x, y, obj_purple_laser)
                        direction = other.aimDirection
            }
            
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Consumable

consumePressed = 0
if global.gp &gt; 0
    if ((gamepad_button_check_pressed(gamepadID, b_consume1) and weaponSelectType = "direct") or (gamepad_button_check_pressed(gamepadID, b_consume2) and weaponSelectType = "cycle"))
        consumePressed = 1
        
if global.gp = 0 and keyboard_check_pressed(b_consume1)
    consumePressed = 1

if consumePressed
{
    if consume != "none"
    {
        audio_play_sound(sndConsume, 5, 0)
        gamepad_set_vibration(gamepadID,0.5,0)
        alarm[1] = sec * 0.15
    }
    
    if consume = "smallPotion"
    {
        if global.mp = 0
        {
            currentHealth += 25
            currentHealth = clamp(currentHealth, 1, maxHealth)
        }
        else
        {
            currentHealth += 25
            currentHealth = clamp(currentHealth, 1, maxHealth)
        }
        consume = "none"
    }
    
    if consume = "weakPotion"
    {
        currentHealth -= 25
        partnerID.currentHealth += 25
        partnerID.currentHealth = clamp(partnerID.currentHealth, 1, partnerID.maxHealth)
        consume = "none"
    }
    
    if consume = "taintedPotion"
    {
        currentHealth += 50
        currentHealth = clamp(currentHealth, 1, maxHealth)
        partnerID.currentHealth -= 25
        consume = "none"
    }
    
    if consume = "unlimitedAmmo"
    {
        unlimitedAmmo = sec * 15
        consumeTimer = sec * 15
        consume = "none"
    }
    
    if consume = "invulnerable"
    {
        invulnerable += sec * 10
        consumeTimer = sec * 10
        consume = "none"
    }
    
    if consume = "nuke"
    {
        chance = irandom(1)
        
        if chance = 0
            currentHealth = 1
            
        if chance = 1
            with obj_baddie
                instance_destroy()
        
        consume = "none"
    }
    
    if consume = "enemySlow"
    {
        global.enemySlow += sec * 15
        consumeTimer = sec * 15
        consume = "none"
    }
    
    if consume = "damageField"
    {
        with instance_create(x, y, obj_damageField)
            playerID = other.id
        consume = "none"
    }
    
    if consume = "ammoBring"
    {
        greenAmmo = global.greenAmmoMax
        blueAmmo = global.blueAmmoMax
        yellowAmmo = global.yellowAmmoMax
        redAmmo = global.redAmmoMax
        consume = "none"
        
        if global.mp = 1
        {
            partnerID.greenAmmo = 0
            partnerID.blueAmmo = 0
            partnerID.yellowAmmo = 0
            partnerID.redAmmo = 0
        }
    }
    
    if consume = "killRandom"
    {
        if instance_exists(obj_baddie)
        {
            elist = ds_list_create()
            with obj_baddie
                ds_list_add(other.elist, self)
            ds_list_shuffle(elist)
            with ds_list_find_value(elist, 0)
                instance_destroy()
            ds_list_destroy(elist)
            consume = "none"
        }
    }
    
    if consume = "yellowCoin"
    {
        yellowCoin = sec * 3
        consumeTimer = sec * 3
        consume = "none"
    }
    
    if consume = "quad"
    {
        quadTimer = sec * 5
        consumeTimer = sec * 5
        consume = "none"
    }
}

if consumeTimer &gt; 0
    consumeTimer -= 1

if unlimitedAmmo &gt; 0
        unlimitedAmmo -= 1
        
if yellowCoin &gt; 0
        yellowCoin -= 1
        
if quadTimer &gt; 0
        quadTimer -= 1
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shield Time Damage Resest
if shieldFire = 1
{
    if !instance_exists(obj_fire)
        shieldFire = 0
    else
    {
        if !place_meeting(x, y, obj_fire)
            shieldFire = 0
    }
}
    
if shieldBad3B = 1
{
    if !instance_exists(obj_bad3b_attack)
        shieldBad3B = 0
    else
    {
        if distance_to_object(instance_nearest(x, y, obj_bad3b_attack)) &gt; 10
            shieldBad3B = 0
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///D-Pad Settings
if global.gp &gt; 0
{
    if gamepad_button_check_pressed(gamepadID, gp_padl)
    {
        switch (crosshairType)
        {
            case "default": crosshairType = "short" break;
            case "short": crosshairType = "far" break;
            case "far": crosshairType = "default dotted" break;
            case "default dotted": crosshairType = "short dotted" break;
            case "short dotted": crosshairType = "far dotted" break;
            case "far dotted": crosshairType = "default" break;
        }
        
        message = "Crosshair:" + crosshairType
        alarm[3] = sec * 1.5
        
        ini_open("options")
            ini_write_string(string(PID), "crosshairType", crosshairType)
        ini_close()
         
    }
    if gamepad_button_check_pressed(gamepadID, gp_padr)
    {
        switch (aimAssist)
        {
            case "off": aimAssist = "low" break;
            case "low": aimAssist = "high" break;
            case "high": aimAssist = "auto" break;
            case "auto": aimAssist = "off" break;
        }
        
        message = "Aim Assist: " + aimAssist
        alarm[3] = sec * 1.5
        
        ini_open("options")
            ini_write_string(string(PID), "aimAssist", aimAssist)
        ini_close()
         
    }
    if gamepad_button_check_pressed(gamepadID, gp_padd)
    {
        switch (weaponSelectType)
        {
            case "direct": weaponSelectType = "cycle" break;
            case "cycle": weaponSelectType = "direct" break;
        }
        
        message = "Weapon Select: " + weaponSelectType
        alarm[3] = sec * 1.5
        
        ini_open("options")
            ini_write_string(string(PID), "weaponSelectType", weaponSelectType)
        ini_close()
         
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Death

if currentHealth &gt; maxHealth
    currentHealth -= 1 / sec
    
if currentHealth &gt; maxHealth and currentHealth &lt; maxHealth + 1
    currentHealth = maxHealth

if currentHealth &lt; 1
{

    if global.gameMode = "coop"
    {
        if PID = 0
            instance_create(x, y, obj_player1_corpse)
            
        if PID = 1
            instance_create(x, y, obj_player2_corpse)
    }
    else
    {
        with instance_create(x, y, obj_health_orb)
        {
            value = 35
            alarm[0] = 5 * sec
        }
    }
        
    instance_destroy()
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Statue

if !place_meeting(x, y, obj_statue_area)
    statue = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_item">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup
bought = 0
itemName = other.name
itemDesc = other.desc
itemPrice = floor(other.cost * (1 - other.discount) * (1 - global.discount))
if global.gp = 0
    itemPrompt = 6
else
    itemPrompt = 0

if itemName = "Shield Fill"
    itemPrice = 20 * shieldMax
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Gold Player
/*
if itemType = "gold" and global.coins &gt;= itemPrice
{
    if gamepad_button_check_pressed(gamepadID, b_g)
    {
        gold = 1
        bought = 1
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pickup
itemPickupPressed = 0

if global.gp &gt; 0 and gamepad_button_check_pressed(gamepadID, b_g)
    itemPickupPressed = 1
if global.gp = 0 and keyboard_check_pressed(b_interact)
    itemPickupPressed = 1


if global.coins &gt;= itemPrice and itemPickupPressed
{
    switch(itemName)
    {
        case "Health Max": maxHealth += 25; minHealth += 10; break;
        case "Health": currentHealth += 50; clamp(currentHealth, 0, maxHealth); break;
        case "Health Orb": global.healthOrbs += 1 break;
        case "Shield Fill": shield = shieldMax; break;
        case "Shield Add": shieldMax += 1; if shieldMax = 5 ds_list_delete(global.weaponLoot, ds_list_find_index(global.weaponLoot, "Shield Add"))break;
        case "Damage Resist": damageResist += 0.20; break;
        case "Move Speed": moveSpeed += 0.5; break;
        case "Respawn Time": global.spawnTime += 2; break;
        case "Barrels":  global.barrelDamage += 20; break;
        case "Coin Rate": global.coinRate += 0.30 break;
        case "Discount": global.discount += 0.15 break;
        case "Green Fire Rate": greenReloadTime *= 0.8; break;
        case "Blue Fire Rate": blueReloadTime *= 0.8; break;
        case "Yellow Fire Rate": yellowReloadTime *= 0.8; break;
        case "Red Damage": redDamage += 5; redDamageB += 5;break;
        case "Green Damage": greenDamage += 12; break;
        case "Yellow Damage":yellowDamage += 4; break;
        case "Red Alt Damage": redPierceDamage += 0.25; redBounceDamage += 0.25; break;
        case "Green Alt Damage": greenPierceDamage += 0.25; greenBounceDamage += 0.25; break;
        case "Blue Alt Damage": bluePierceDamage += 0.25; blueBounceDamage += 0.25; break;
        case "Yellow Alt Damage": yellowPierceDamage += 0.25; yellowBounceDamage += 0.25; break;
        case "Red Pierce": redPierces += 1 break;
        case "Blue Pierce": bluePierces += 1 break;
        case "Yellow Pierce": yellowPierces += 1 break;
        case "Red Bounce": redBounces += 1 break;
        case "Green Bounce": greenBounces += 1 break;
        case "Blue Bounce": blueBounces += 1 break;
        case "Red Ammo": global.redAmmoMax += 2; redAmmo += 2; break;
        case "Green Ammo": global.greenAmmoMax += 1; greenAmmo += 1; break;
        case "Blue Ammo": global.blueAmmoMax += 7; blueAmmo += 7; break;
        case "Yellow Ammo": global.yellowAmmoMax += 2; yellowAmmo += 2; break;
        case "Red Radius": redRadius = 1 ds_list_delete(global.weaponLoot, ds_list_find_index(global.weaponLoot, "Red Radius")); break;
        case "Red Jump": redSelf = 1 ds_list_delete(global.weaponLoot, ds_list_find_index(global.weaponLoot, "Red Jump"))break;
        case "Green Wall Pierce": greenWall = 1 ds_list_delete(global.weaponLoot, ds_list_find_index(global.weaponLoot, "Green Wall Pierce"))break;
        case "Green Burst": greenBurst = 1 ds_list_delete(global.weaponLoot, ds_list_find_index(global.weaponLoot, "Green Burst"))break;
        case "Blue Halt": blueHalt = 1 ds_list_delete(global.weaponLoot, ds_list_find_index(global.weaponLoot, "Blue Halt"))break;
        case "Blue Cross": blueCross = 1 ds_list_delete(global.weaponLoot, ds_list_find_index(global.weaponLoot, "Blue Cross"))break;
        case "Yellow Seven": yellow7 = 1; yellowPellets = 7 ds_list_delete(global.weaponLoot, ds_list_find_index(global.weaponLoot, "Yellow Seven"))break;
        case "Yellow Narrow": yellowSpread = 1; yellowAngle = 5 ds_list_delete(global.weaponLoot, ds_list_find_index(global.weaponLoot, "Yellow Narrow"))break;
        
        case "Mi. Health Max": maxHealth += 10; break;
        case "Mi. Health": currentHealth += 15; clamp(currentHealth, 0, maxHealth); break;
        case "Mi. Damage Resist": damageResist += 0.10; break;
        case "Mi. Move Speed": moveSpeed += 0.3; break;
        case "Mi. Barrels":  global.barrelDamage += 10; break;
        case "Mi. Coin Rate": global.coinRate += 0.05 break;
        case "Mi. Discount": global.discount += 0.05 break;
        case "Mi. Red Damage": redDamage += 5;break;
        case "Mi. Green Damage": greenDamage += 5; break;
        case "Mi. Yellow Damage": yellowDamage += 2; break;
        case "Mi. Red Alt Damage": redPierceDamage += 0.10; redBounceDamage += 0.10; break;
        case "Mi. Green Alt Damage": greenPierceDamage += 0.10; greenBounceDamage += 0.10; break;
        case "Mi. Blue Alt Damage": bluePierceDamage += 0.10; blueBounceDamage += 0.10; break;
        case "Mi. Yellow Alt Damage": yellowPierceDamage += 0.10; yellowBounceDamage += 0.10; break;
        case "Mi. Red Pierce": redPierces += 1 break;
        case "Mi. Blue Pierce": bluePierces += 1 break;
        case "Mi. Yellow Pierce": yellowPierces += 1 break;
        case "Mi. Red Bounce": redBounces += 1 break;
        case "Mi. Green Bounce": greenBounces += 1 break;
        case "Mi. Blue Bounce": blueBounces += 1 break;
    }
    buyItem(itemPrice)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_consume">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>consumeName = other.name
consumeDesc = other.desc

consumePickupPressed = 0

if global.gp &gt; 0 and gamepad_button_check_pressed(gamepadID, b_g)
    consumePickupPressed = 1
if global.gp = 0 and keyboard_check_pressed(b_interact)
    consumePickupPressed = 1

if consumePickupPressed
{
    if consume = "none"
    {
        audio_play_sound(sndItem, 1, 0)
        gamepad_set_vibration(gamepadID,0.5,0)
        alarm[1] = sec * 0.15
    
        consume = other.type
        with other
            instance_destroy()
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_room_type_collision">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>obj_camera.roomtype[other.i] = other.type
if obj_camera.roomcolor[other.i] = 0
    obj_camera.roomcolor[other.i] = 1

if gamepad_button_check_pressed(gamepadID, gp_stickl)
{
    switch (obj_camera.roomcolor[other.i])
    {
        case 1: obj_camera.roomcolor[other.i] = 2; break;
        case 2: obj_camera.roomcolor[other.i] = 3; break;
        case 3: obj_camera.roomcolor[other.i] = 4; break;
        case 4: obj_camera.roomcolor[other.i] = 0; break;
    }
     
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_bad18_aoe">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if invulnerable = 0
    {
        if ds_list_find_index(other.hitList, id) = -1
        {
            ds_list_add(other.hitList, id)
            gamepad_set_vibration(gamepadID, 0.6, 0.6)
            alarm[1] = sec * 0.15

            audio_play_sound(sndHitPlayer, 1, 0)
            
            imageColor = blipColor
            alarm[6] = blipTime
            
            greenAmmo = clamp(greenAmmo - 2, 0, 100)
            blueAmmo = clamp(blueAmmo - 20, 0, 100)
            yellowAmmo = clamp(yellowAmmo - 4, 0, 100)
            redAmmo = clamp(redAmmo - 3, 0, 100)
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_bad17_attack">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if invulnerable = 0
    {
        gamepad_set_vibration(gamepadID, 0.25, 0.25)
        alarm[1] = sec * 0.1
        
        if shield &gt; 0
        {
            if shieldBad3B &lt;= 0
            {
                shieldBad3B = 1
                shield -= 1
            }
        }
        else if shieldBad3B = 0
        {
            currentHealth -= other.damage * (1 - damageResist)
            damageCount += round(other.damage * (1 - damageResist))
            message = damageCount
            alarm[3] = sec * 1.5   
        }
        
        imageColor = blipColor
        alarm[6] = blipTime
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_bad15_aoe">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if invulnerable = 0
    {
        gamepad_set_vibration(gamepadID, 0.25, 0.25)
        alarm[1] = sec * 0.1
        
        if shield &gt; 0
        {
            if shieldBad3B &lt;= 0
            {
                shieldBad3B = 1
                shield -= 1
            }
        }
        else if shieldBad3B = 0
        {
            currentHealth -= other.damage * (1 - damageResist)
            damageCount += round(other.damage * (1 - damageResist))
            message = damageCount
            alarm[3] = sec * 1.5   
        }
        
        imageColor = blipColor
        alarm[6] = blipTime
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_bad12_attack">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if invulnerable = 0
    {
        gamepad_set_vibration(gamepadID, 0.25, 0.25)
        alarm[1] = sec * 0.1
        
        if shield &gt; 0
        {
            if shieldBad3B &lt;= 0
            {
                shieldBad3B = 1
                shield -= 1
            }
        }
        else if shieldBad3B = 0
        {
            currentHealth -= other.damage * (1 - damageResist)
            damageCount += round(other.damage * (1 - damageResist))
            message = damageCount
            alarm[3] = sec * 1.5   
        }
        
        imageColor = blipColor
        alarm[6] = blipTime
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_fire">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if invulnerable = 0
    {
        gamepad_set_vibration(gamepadID, 0.2, 0.2)
        alarm[1] = sec * 0.1
        
        if shield &gt; 0
        {
            if shieldFire = 0
            {
                shieldFire = 1
                shield -= 1
            }
        }
        else
        {
            currentHealth -= other.damage * (1 - damageResist)
            damageCount += other.damage * (1 - damageResist)
            message = round(damageCount)
            alarm[3] = sec * 1.5   
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_bad7_attack">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ds_list_find_index(other.hitList, id) = -1
{
    gamepad_set_vibration(gamepadID, 0.6, 0.6)
        alarm[1] = sec * 0.15
    ds_list_add(other.hitList, id)
    if shield &gt; 0
        shield -= 1
    else
    {
        currentHealth -= other.damage * (1 - damageResist)
        damageCount += round(other.damage * (1 - damageResist))
        message = damageCount
        alarm[3] = sec * 1.5
    }
    
    audio_play_sound(sndHitPlayer, 1, 0)
    
    imageColor = blipColor
    alarm[6] = blipTime
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_bad4_bullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with other
    instance_destroy()
if invulnerable = 0
    {
        gamepad_set_vibration(gamepadID, 0.6, 0.6)
        alarm[1] = sec * 0.15
         if shield &gt; 0
                shield -= 1
        else
        {
            currentHealth -= other.damage * (1 - damageResist)
            damageCount += round(other.damage * (1 - damageResist))
            message = damageCount
            alarm[3] = sec * 1.5
        }
            
        audio_play_sound(sndHitPlayer, 1, 0)
        
        imageColor = blipColor
        alarm[6] = blipTime
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_bad3b_attack">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if invulnerable = 0
    {
        gamepad_set_vibration(gamepadID, 0.25, 0.25)
        alarm[1] = sec * 0.1
        
        if shield &gt; 0
        {
            if shieldBad3B &lt;= 0
            {
                shieldBad3B = 1
                shield -= 1
            }
        }
        else if shieldBad3B = 0
        {
            currentHealth -= other.damage * (1 - damageResist)
            damageCount += other.damage * (1 - damageResist)
            message = round(damageCount)
            alarm[3] = sec * 1.5
        }
        
        imageColor = blipColor
        alarm[6] = blipTime
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemy_melee">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if other.damaged = 0
{
    if invulnerable = 0
    {
        if other.object_index = obj_bad3_attack
            gamepad_set_vibration(gamepadID, 0.6, 0.6)
        else
            gamepad_set_vibration(gamepadID, 0.6, 0.6)
        alarm[1] = sec * 0.15
        if shield &gt; 0
                shield -= 1
        else
        {
            currentHealth -= other.damage * (1 - damageResist)
            damageCount += other.damage * (1 - damageResist)
            message = damageCount
            alarm[3] = sec * 1.5
        }
            
        audio_play_sound(sndHitPlayer, 1, 0)
        
        imageColor = blipColor
        alarm[6] = blipTime
    }
    other.damaged = 1
}

other.damaged = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_bad10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if invulnerable = 0
    {
        if other.chargeState = "charge"
        if ds_list_find_index(other.hitList, id) = -1
        {
            ds_list_add(other.hitList, id)
            gamepad_set_vibration(gamepadID, 0.6, 0.6)
            alarm[1] = sec * 0.15
            
            if shield &gt; 0
                shield -= 1
            else
            {
                currentHealth -= other.damage * (1 - damageResist)
                damageCount += other.damage * (1 - damageResist)
                message = damageCount
                alarm[3] = sec * 1.5
            }
                
            audio_play_sound(sndHitPlayer, 1, 0)
            
            imageColor = blipColor
            alarm[6] = blipTime
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_spike">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if invulnerable = 0
{
    alarm[1] = sec * 0.15
    if shield &gt; 0
            shield -= 1
    else
    {
        currentHealth -= other.damage * (1 - damageResist)
        damageCount += other.damage * (1 - damageResist)
        message = damageCount
        alarm[3] = sec * 1.5
    }
        
    audio_play_sound(sndHitPlayer, 1, 0)
    
    imageColor = blipColor
    alarm[6] = blipTime
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_statue_area">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Statue

statue = 1
statueType = other.type
statueDesc = other.desc

if global.gp = 0
    itemPrompt = 6
else
    itemPrompt = 0

statuePickupPressed = 0

if global.gp &gt; 0 and gamepad_button_check_pressed(gamepadID, b_g)
    statuePickupPressed = 1
if global.gp = 0 and keyboard_check_pressed(b_interact)
    statuePickupPressed = 1

if statueType = "freeItem" and statuePickupPressed
{
    currentHealth -= 20
    with instance_create(other.x-27, other.y+81, obj_anyItem)
        discount = 1
        
    with obj_statue
        image_index += 1
        
    itemVibration()
}

if statueType = "moveSpeed" and statuePickupPressed
{
    currentHealth -= 20
    moveSpeed += 0.5
    
    with obj_statue
            image_index += 1
    
    itemVibration()
}

if statueType = "nuke" and statuePickupPressed
{
    currentHealth = choose(0, maxHealth)
    
    itemVibration()
}

if statueType = "coins" and statuePickupPressed
{
    currentHealth -= 20
    repeat(10)
        with instance_create(x, y+81, obj_coin)
            value = 2
            
    with obj_statue
            image_index += 1
            
    itemVibration()
}

if statueType = "damage"
{
    rate = 0.25
    if statuePickupPressed
    {
        currentHealth -= 20
        greenDamage += greenDamageBase * rate
        
        with obj_statue
            image_index += 1
        itemVibration()
    }
    if statuePickupPressed
    {
        currentHealth -= 20
        redDamage += redDamageBase * rate
        
        with obj_statue
            image_index += 1
        itemVibration()
    }
    if statuePickupPressed
    {
        currentHealth -= 20
        yellowDamage += yellowDamageBase * rate
        
        with obj_statue
            image_index += 1
        itemVibration()
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_jumpPad">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if other.image_index = 0
    speedBonus = clamp(speedBonus + 4, 0, moveSpeed + 6)

other.image_index = 1
other.alarm[0] = sec * 3
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_portal_hor">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Teleport

if global.gameMode = "coop"
{
    x = other.parent.x + other.xDest 
    y = other.parent.y + other.yDest
}
if global.gameMode = "pvp"
{
    x = other.xDest 
    y = other.yDest  
}

audio_play_sound(sndTeleport, 1, 0)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_portal">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Teleport

if global.gameMode = "coop"
{
    x = other.parent.x + other.xDest 
    y = other.parent.y + other.yDest
}
if global.gameMode = "pvp"
{
    x = other.xDest 
    y = other.yDest  
}

audio_play_sound(sndTeleport, 1, 0)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_gexplosion_damage">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///RocketJump
if other.playerID = id
{
    speedBonus = 3.5
    invulnerable = 1
    alarm[2] = iFrameLength
}
else if global.gameMode = "pvp"
{
    if ds_list_find_index(other.hitList, id) = -1
    {
        ds_list_add(other.hitList, id)
        gamepad_set_vibration(gamepadID, 0.6, 0.6)
    alarm[1] = sec * 0.15
     if shield &gt; 0
            shield -= 1
    else
        currentHealth -= other.damage
        
    audio_play_sound(sndHitPlayer, 1, 0)
    
    imageColor = blipColor
    alarm[6] = blipTime
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_player_bullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if other.playerID != id and global.gameMode = "pvp"
{
    gamepad_set_vibration(gamepadID, 0.6, 0.6)
    alarm[1] = sec * 0.15
     if shield &gt; 0
            shield -= 1
    else
        currentHealth -= other.damage
        
    audio_play_sound(sndHitPlayer, 1, 0)
    
    imageColor = blipColor
    alarm[6] = blipTime
    
    with other
        instance_destroy()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///UI
if consumeTimer &gt; 0
    draw_sprite(sprite_index, 5, x, y)

if consume = "none"
{
    draw_sprite(spr_playerui, 0, x, y)
    if shieldMax = 1
        draw_sprite(spr_playeruiShield1, shield, x, y)
    if shieldMax = 2
        draw_sprite(spr_playeruiShield2, shield, x, y)
    if shieldMax = 3
        draw_sprite(spr_playeruiShield3, shield, x, y)
    if shieldMax = 4
        draw_sprite(spr_playeruiShield4, shield, x, y)
    if shieldMax = 5
        draw_sprite(spr_playeruiShield5, shield, x, y)
}
else
{
    draw_sprite(spr_playerui, 1, x, y)
    if shieldMax = 1
        draw_sprite(spr_playeruiShield1, shield, x-15, y)
    if shieldMax = 2
        draw_sprite(spr_playeruiShield2, shield, x-15, y)
    if shieldMax = 3
        draw_sprite(spr_playeruiShield3, shield, x-15, y)
    if shieldMax = 4
        draw_sprite(spr_playeruiShield4, shield, x-15, y)
    if shieldMax = 5
        draw_sprite(spr_playeruiShield5, shield, x-15, y)
}
draw_set_font(mono10)
draw_set_halign(fa_center)
draw_set_valign(fa_middle)


draw_set_color(green)
draw_text(x-30, y+49, greenAmmo)
draw_set_color(blue)
draw_text(x-8, y+49, blueAmmo)
draw_set_color(yellow)
draw_text(x+15, y+49, yellowAmmo)
draw_set_color(red)
draw_text(x+30, y+49, redAmmo)

if global.arenaLock = 0
{
    draw_sprite(spr_keyCoinUI, 0, x, y)
    
    draw_set_color(c_silver)
    draw_text(x-20, y+73, global.keys)
    
    draw_set_color(yellow)
    draw_text(x+18, y+73, global.coins)
}

draw_set_color(c_white)
if consume = "none"
    draw_text(x, y-39,ceil(currentHealth))
else
{
    draw_text(x-15, y-39,ceil(currentHealth))
    
    if consume = "smallPotion"
        index = 0
    if consume = "unlimitedAmmo"
        index = 1
    if consume = "invulnerable"
        index = 2
    if consume = "nuke"
        index = 3
    if consume = "enemySlow"
        index = 4
    if consume = "damageField"
        index = 5
    if consume = "ammoBring"
        index = 6
    if consume = "killRandom"
        index = 7
    if consume = "fuckYou"
        index = 8
    if consume = "weakPotion"
        index = 9
    if consume = "taintedPotion"
        index = 10
    if consume = "yellowCoin"
        index = 11
    if consume = "quad"
        index = 12
    
    draw_sprite(spr_playeruiitem, index, x+24, y-41)
}

if place_meeting(x, y, obj_consume)
{
    draw_sprite(spr_consumeUI, 0, x, y)
    
    draw_set_font(mono10)
    draw_text_ext(x, y+150, consumeDesc, 14, 192)
    
    draw_set_font(mono16)
    draw_text(x, y+100, consumeName)
    
    draw_sprite(spr_button_prompt, itemPrompt, x, y+209)
}

if place_meeting(x, y, obj_item)
{
    draw_sprite(spr_consumeUI, 0, x, y)
    
    draw_set_font(mono10)
    draw_text_ext(x, y+150, itemDesc, 14, 192)
    
    draw_set_font(mono16)
    draw_text(x, y+100, itemName)
    
    if itemPrice &gt; 0
    {
        draw_sprite_ext(spr_coin, 0, x-55, y+210, 0.75, 0.75, 0, c_white, 1)
        draw_set_halign(fa_center)
        draw_text(x-28, y+209, itemPrice)
        
        draw_sprite(spr_button_prompt, itemPrompt, x+50, y+209)
    }
    else
        draw_sprite(spr_button_prompt, itemPrompt, x, y+209)
}
if statue = 1
{
    draw_sprite(spr_consumeUI, 0, x, y)
    
    draw_set_font(mono10)
    draw_text_ext(x, y+150, statueDesc, 14, 192)
    
    draw_set_font(mono16)
    draw_text(x, y+100, "Blood Statue")
    
    draw_sprite(spr_button_prompt, itemPrompt, x, y+209)
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ADS
///ADS
if global.gp &gt; 0
{
    if (xAim !=0 or yAim !=0) and gamepad_button_check(gamepadID, b_aim)
    {
        crosshairColor = weapon - 1
        ADSList = ds_list_create()
        
        exitLoop = false
        lineX = x
        lineY = y
        lineDir = point_direction(0, 0, xAim, yAim)
        switch (weapon)
        {
            case WGREEN: lineDistStart = 1920; break;
            case WRED: lineDistStart = 240; break;
            case WYELLOW: lineDistStart = 350; break;
            case WBLUE: lineDistStart = 608; break;
        }
        lineDist = lineDistStart
        lineDrawMax = lineDistStart
        
        
        switch (weapon)
        {
            case WGREEN: lineBounce = greenBounces; break;
            case WRED: lineBounce = redBounces; break;
            case WYELLOW: lineBounce = 8; break;
            case WBLUE: lineBounce = blueBounces; break;
        }
        
        switch (weapon)
        {
            case WGREEN: linePierce = 6; break;
            case WRED: linePierce = redPierces; break;
            case WYELLOW: linePierce = yellowPierces; break;
            case WBLUE: linePierce = bluePierces; break;
        }
        i = 0
        
        while(exitLoop = false)
        {
            exitLoop = true
        
            nLineX = lengthdir_x(lineDist, lineDir)
            nLineY = lengthdir_y(lineDist, lineDir)
            nLineDist = lineDist
            nLineDir = lineDir
            ADSBounced = 0
            
            result = scr_raycast(lineX, lineY, lineDir, lineDist, obj_wall)
            
            if result[0] = false
                exitLoop = true
            else
            {
                if lineBounce &gt; 0
                {
                    ADSBounced = 1
                    exitLoop = false
                    lineBounce -= 1
                
                    //New Direction
                    normal = collision_normal(result[2], result[3], obj_wall)
                    
                    xVec = lengthdir_x(1, lineDir)
                    yVec = lengthdir_y(1, lineDir)
                    
                    if round(normal) = 0 or round(normal) = 180 or round(normal) = 360
                        xVec *= -1
                    if round(normal) = 90 or round(normal) = 270
                        yVec *= -1
                        
                    nLineDir = point_direction(0, 0, xVec, yVec)
                    
                    //New Distance
                    nLineDist = lineDist
                    nLineDist -= point_distance(lineX, lineY, result[0], result[1])
                    nLineDist += lineDistStart * 0.75
                    
                    if nLineDist &gt; lineDrawMax
                        lineDrawMax = nLineDist
                }
                
                //New Point
                nLineX = result[0]
                nLineY = result[1]
            }
            
            
            result2 = scr_raycast(lineX, lineY, lineDir, lineDist, obj_baddie)
            
            if result2[0] = false
            {
                if ADSBounced = 0
                    exitLoop = true
            }
            else if ds_list_find_index(ADSList, result2[4]) = -1
            {
                ds_list_add(ADSList, result2[4])
                if linePierce &gt; 0
                {
                    exitLoop = false
                    linePierce -= 1
        
                    //New Distance
                    nLineDist = lineDist
                    nLineDist -= point_distance(lineX, lineY, result2[0], result2[1])
                    nLineDist += lineDistStart * 0.5
                    
                    if nLineDist &gt; lineDrawMax
                        lineDrawMax = nLineDist
                }
                
                //New Point
                nLineX = result2[0]
                nLineY = result2[1]
            }
            
            ///Draw Dotted
            
            width = 2
                for(j = 0; clamp(point_distance(lineX, lineY, nLineX, nLineY), 0, lineDrawMax) &gt; (j * width); j++)
                    draw_sprite_ext(spr_dotted, crosshairColor , lineX + lengthdir_x(j*width, lineDir), lineY + lengthdir_y(j*width, lineDir), 1, 1, lineDir, c_white, 1)
                    
            if exitLoop = true
            {
                if hit = 1
                    draw_sprite_ext(spr_crosshair, 4 , lineX + lengthdir_x(j, lineDir), lineY + lengthdir_y(j, lineDir), 1, 1, lineDir, c_white, 1)
                else
                    draw_sprite_ext(spr_crosshair, crosshairColor , lineX + lengthdir_x(j*width, lineDir), lineY + lengthdir_y(j*width, lineDir), 1, 1, lineDir, c_white, 1)
            }
        
            lineX = nLineX
            lineY = nLineY
            lineDir = nLineDir
            lineDist = nLineDist
            
            i++
            if i &gt; 8
                exitLoop = true
        }
        
        ds_list_destroy(ADSList)
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Aim

if global.gp &gt; 0 and !gamepad_button_check(gamepadID, b_aim)
{
    if crosshairType = "default" or crosshairType = "default dotted"
    {
        i = 2
        if weapon = WGREEN or weapon = WRED
            i = 4
    }
    
    if crosshairType = "short" or crosshairType = "short dotted"
        i = 2
    
    if crosshairType = "far" or crosshairType = "far dotted"
        i = 4
    
    
    if (xAim !=0 or yAim !=0)
    {
        crosshairColor = weapon - 1
        dottedColor = crosshairColor
        if global.gameMode = "coop" and global.mp = 1
        if instance_exists(partnerID)
        if weapon = partnerID.weapon
            dottedColor = 5
    
    
        draw_sprite(spr_crosshair,crosshairColor , round(x + (xAim*i)), round(y + (yAim*i)))
        if hit = 1
            draw_sprite(spr_crosshair,4, round(x + (xAim*i)), round(y + (yAim*i)))
        
        if crosshairType = "far dotted" or crosshairType = "short dotted" or crosshairType = "default dotted"
        {
            lineAngle = point_direction(x , y, round(x + (xAim*i)), round(y + (yAim*i)))
            width = 16
            
            for(j = 0; distance_to_point(round(x + (xAim*i)), round(y + (yAim*i))) &gt; (j * width); j++)
                draw_sprite_ext(spr_dottedOLD, crosshairColor , x + lengthdir_x(j*width, lineAngle), y + lengthdir_y(j*width, lineAngle), 1, 1, lineAngle, c_white, 1)
        }
    }
}
if global.gp = 0
{
    crosshairColor = weapon - 1
    draw_sprite(spr_crosshair,crosshairColor, round(x + xAim), round(y + yAim))
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Message
draw_set_font(mono10)
draw_set_color(c_white)
draw_set_halign(fa_center)
draw_set_valign(fa_middle)

if message != ""
    draw_text(x, y - 73, message)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///StatsUI
event_inherited()

ix = view_xview[0]
iy = view_yview[0]
iP = 0

UIPressed = 0

if global.gp &gt; 0 and (gamepad_button_check(0, gp_select) or (global.mp = 1 and gamepad_button_check(1, gp_select)))
    UIPressed = 1
if global.gp = 0 and keyboard_check(vk_tab)
    UIPressed = 1

if UIPressed
    with obj_player1
    {
        draw_sprite(spr_statsUI, 0, ix, iy)
        draw_sprite(spr_statsUI, 1, ix, iy)
        
        draw_set_font(mono22)
        draw_set_halign(fa_center)
        draw_set_valign(fa_middle)
        
            statFontColor(global.coinRate, 1)
        draw_text(ix+780, iy+150, string(global.coinRate*100) + "%")
            statFontColor(global.healthOrbs, global.healthOrbsStart)
        draw_text(ix+180, iy+270, string(global.healthOrbs))
            statFontColor(global.discount, 0)
        draw_text(ix+780, iy+270, string(global.discount) + "")
            statFontColor(global.spawnTime, 3)
        draw_text(ix+1260, iy+150, string(global.spawnTime))
            statFontColor(global.greenAmmoMax, global.greenAmmoStart)
        draw_text(ix+120, iy+510, string(global.greenAmmoMax))
            statFontColor(global.blueAmmoMax, global.blueAmmoStart)
        draw_text(ix+1080, iy+510, string(global.blueAmmoMax))
            statFontColor(global.yellowAmmoMax, global.yellowAmmoStart)
        draw_text(ix+1080, iy+870, string(global.yellowAmmoMax))
            statFontColor(global.redAmmoMax, global.redAmmoStart)
        draw_text(ix+120, iy+870, string(global.redAmmoMax))
            statFontColor(global.barrelDamage, global.barrelDamageStart)
        draw_text(ix+1260, iy+270, string(global.barrelDamage))
            statFontColor(global.restockTime, global.restockTimeStart)
        draw_text(ix+1680, iy+270, string(global.restockTime/sec))
        

            statFontColor(maxHealth, maxHealthStart)
        draw_text(ix+180, iy+150, string(maxHealth))
            statFontColor(minHealth, minHealthStart)
        draw_text(ix+420, iy+150, string(minHealth))
            statFontColor(moveSpeed, 3.5)
        draw_text(ix+1680, iy+150, string(moveSpeed * 10))
            statFontColor(damageResist, 0)
        draw_text(ix+420, iy+270, string(damageResist * 100) + "%")
        
            statFontColor(greenReloadTime, greenReloadTimeBase)
        draw_text(ix+360, iy+510, string(abs(floor((greenReloadTime - greenReloadTimeBase)/greenReloadTimeBase * 100)) + 100) + "%")
            statFontColor(greenDamage, greenDamageBase)
        draw_text(ix+720, iy+510, string(greenDamage))// + "(" + string(greenDamage/greenDamageBase*100) + "%)")
            draw_set_color(c_white)
        draw_text(ix+600, iy+630, "-")
            statFontColor(greenPierceDamage * global.hardcore, 1 * global.hardcore)
        draw_text(ix+840, iy+630, "+" + string((greenPierceDamage * 100) - 100) + "%")
            statFontColor(greenBounces, 0)
        draw_text(ix+120, iy+630, string(greenBounces))
            statFontColor(greenBounceDamage * global.hardcore, 1.5 * global.hardcore)
        draw_text(ix+360, iy+630, "+" + string((greenBounceDamage * 100) - 100) + "%")
            statFontColor(greenWall, 0)
            text = "No"
            if greenWall = 1
                text = "Yes"
        draw_text(ix+360, iy+690, text)
        statFontColor(greenBurst, 0)
            text = "No"
            if greenBurst = 1
                text = "Yes"
        draw_text(ix+900, iy+690, text)
        
            statFontColor(blueReloadTime, blueReloadTimeBase)
        draw_text(ix+1320, iy+510, string(abs(floor((blueReloadTime - blueReloadTimeBase)/blueReloadTimeBase * 100)) + 100) + "%")
            draw_set_color(c_white)
        draw_text(ix+1680, iy+510, "6")
            statFontColor(bluePierces, 0)
        draw_text(ix+1560, iy+630, string(bluePierces))
            statFontColor(bluePierceDamage * global.hardcore, 1.25 * global.hardcore)
        draw_text(ix+1800, iy+630, "+" + string((bluePierceDamage * 100) - 100) + "%")
            statFontColor(blueBounces, 0)
        draw_text(ix+1080, iy+630, string(blueBounces))
            statFontColor(blueBounceDamage * global.hardcore, 1.5 * global.hardcore)
        draw_text(ix+1320, iy+630, "+" + string((blueBounceDamage * 100) - 100) + "%")
        statFontColor(blueHalt, 0)
            text = "No"
            if blueHalt = 1
                text = "Yes"
        draw_text(ix+1380, iy+690, text)
        statFontColor(blueCross, 0)
            text = "No"
            if blueCross = 1
                text = "Yes"
        draw_text(ix+1860, iy+690, text)
        
            statFontColor(yellowReloadTime, yellowReloadTimeBase)
        draw_text(ix+1320, iy+870, string(abs(floor((yellowReloadTime - yellowReloadTimeBase)/yellowReloadTimeBase * 100)) + 100) + "%")
            statFontColor(yellowDamage, yellowDamageBase)
        draw_text(ix+1680, iy+870, string(yellowDamage)) ///yellowDamageBase*100) + "%")
            statFontColor(yellowPierces, 0)
        draw_text(ix+1560, iy+990, string(yellowPierces))
            statFontColor(yellowPierceDamage * global.hardcore, 1.25 * global.hardcore)
        draw_text(ix+1800, iy+990, "+" + string((yellowPierceDamage * 100) - 100) + "%")
            draw_set_color(c_white)
        draw_text(ix+1080, iy+990, string("-"))
            statFontColor(yellowBounceDamage * global.hardcore, 1 * global.hardcore)
        draw_text(ix+1320, iy+990,  "+" + string((yellowBounceDamage * 100) - 100) + "%")
        statFontColor(yellow7, 0)
            text = "No"
            if yellow7 = 1
                text = "Yes"
        draw_text(ix+1380, iy+1050, text)
        statFontColor(yellowSpread, 0)
            text = "No"
            if yellowSpread = 1
                text = "Yes"
        draw_text(ix+1860, iy+1050, text)
        
            draw_set_color(c_white)
        draw_text(ix+360, iy+870, "-")
            statFontColor(redDamageB, redDamageBaseB)
        draw_text(ix+840, iy+870, string(redDamageB)) ///redDamageBase*100) + "%")
            statFontColor(redDamage, redDamageBase)
        draw_text(ix+600, iy+870, string(redDamage)) ///redDamageBase*100) + "%")
            statFontColor(redPierces, 0)
        draw_text(ix+600, iy+990, string(redPierces))
            statFontColor(redPierceDamage * global.hardcore, 1.25 * global.hardcore)
        draw_text(ix+840, iy+990, "+" + string((redPierceDamage * 100) - 100) + "%")
            statFontColor(redBounces, 0)
        draw_text(ix+120, iy+990, string(redBounces))
            statFontColor(redBounceDamage * global.hardcore, 1.5 * global.hardcore)
        draw_text(ix+360, iy+990, "+" + string((redBounceDamage * 100) - 100) + "%")
        statFontColor(redSelf, 0)
            text = "No"
            if redSelf = 1
                text = "Yes"
        draw_text(ix+360, iy+1050, text)
        statFontColor(redRadius, 0)
            text = "No"
            if redRadius = 1
                text = "Yes"
        draw_text(ix+900, iy+1050, text)
    }

draw_set_font(mono10)
draw_set_color(c_white)
draw_set_valign(fa_top)
draw_set_halign(fa_left)

draw_text(view_xview[0] + 16, view_yview[0] + 16, "FPS: " + string(fps))
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player and Weapon
image_blend = imageColor
if aimDirection &gt; 90 and aimDirection &lt; 270
{
    image_xscale = -1
    aimXScale = -1
    aimDrawDir = 180
}
else
{
    image_xscale = 1
    aimXScale = 1
    aimDrawDir = 0
}

draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, 0 - (tilt * 2), image_blend, image_alpha)
draw_sprite_ext(spr_weapon, weapon -1, x + weaponRecoilX, y + weaponRecoilY, aimXScale, image_yscale, aimDirection + aimDrawDir, image_blend, image_alpha)

if gold = 1
    draw_sprite(spr_player3, 0, x, y)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
