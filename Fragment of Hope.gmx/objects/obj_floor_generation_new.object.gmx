<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-3</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init
randomize()

instance_create(0, 0, obj_level_macro)

with(obj_wall_corner)
{
    instance_create(x + 54 +(540/2), y + 54 + (540/2), obj_gen_navpoint)
    instance_create(x+54, y+54, obj_empty_blockout)  
    instance_create(x + 54, y, obj_hor_wall)
    instance_create(x, y + 54, obj_vert_wall)
}

with obj_gen_navpoint
    if place_meeting(x, y, obj_level_macro)
        instance_destroy()

//alarm[0] = 1
grid = 0
global.generation = 1
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Wall Randomize
with(obj_hor_wall)
    if place_meeting(x, y-54, obj_level_macro)
        image_index = 0
    else
        image_index = irandom(3)
    
with(obj_vert_wall)
    if place_meeting(x-54, y, obj_level_macro)
        image_index = 0
    else
        image_index = irandom(3)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Arenas
object = noone
globalIteration = 0

repeat(3)
{
    genCreatePairList(6, 7)
    iteration = 0
    go = true
    
    while(go)
    {
        pair = ds_list_find_value(pairList, iteration)
        ix = pair.x * 594
        iy = pair.y * 594
        
        object = instance_create(ix, iy, obj_arena_blockout)
        with object
            if place_meeting(x, y, obj_arena_blockout) or place_meeting(x+1, y+1, obj_level_macro)
                instance_destroy()
            else
                other.go = false      
                
        if go = false or (iteration &gt;= 41)
            break;

        iteration ++
        globalIteration ++       
            
    }
    
    genDestroyList()
        
    if !instance_exists(object) or globalIteration &gt;= 125
        break
    
}

if instance_number(obj_arena_blockout) != 3
    room_restart()
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Required Rooms

roomList = ds_list_create()
ds_list_add(roomList, obj_store_blockout)
ds_list_add(roomList, obj_start_blockout)
ds_list_add(roomList, obj_end_blockout)

roomNumber = 0

repeat(ds_list_size(roomList))
{
    roomObject = ds_list_find_value(roomList, roomNumber)
    
    switch (roomObject)
    {
        case obj_store_blockout: maxX = 7; maxY = 8; break;
        case obj_start_blockout: maxX = 8; maxY = 8; break;
        case obj_end_blockout: maxX = 7; maxY = 8; break;
    }
     
    
    genCreatePairList(maxX, maxY)
    iteration = 0
    go = true
    while(go)
    {
        pair = ds_list_find_value(pairList, iteration)
        ix = pair.x * 594
        iy = pair.y * 594
        
        object = instance_create(ix, iy, roomObject)
        with object
            if place_meeting(x, y, obj_gen_room) or place_meeting(x+1, y+1, obj_level_macro)
                instance_destroy()
            else
                other.go = false  
                
        if go = false or (iteration &gt;= 41)
            break;
        iteration ++
    }
    genDestroyList()
    roomNumber ++
}

ds_list_destroy(roomList)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Extra Rooms
roomList = ds_list_create()
ds_list_add(roomList, obj_misc_blockout1)
ds_list_add(roomList, obj_misc_blockout1)
ds_list_add(roomList, obj_misc_blockout2)
ds_list_add(roomList, obj_misc_blockout2)
ds_list_add(roomList, obj_misc_blockout3)
ds_list_add(roomList, obj_misc_blockout3)
ds_list_shuffle(roomList)

rooms = irandom_range(2,4)
roomNumber = 0

repeat(rooms)
{
    roomObject = ds_list_find_value(roomList, roomNumber)
    
    switch (roomObject)
    {
        case obj_misc_blockout1: maxX = 7; maxY = 8;break;
        case obj_misc_blockout2: maxX = 8; maxY = 7;break;
        case obj_misc_blockout3: maxX = 7; maxY = 7;break;
    }
     
    
    genCreatePairList(maxX, maxY)
    iteration = 0
    go = true
        while(go)
        {
            pair = ds_list_find_value(pairList, iteration)
            ix = pair.x * 594
            iy = pair.y * 594
            
            object = instance_create(ix, iy, roomObject)
            with object
                if place_meeting(x, y, obj_gen_room) or place_meeting(x+1, y+1, obj_level_macro)
                    instance_destroy()
                else
                    other.go = false  
                    
            if go = false or (iteration &gt;= 41)
                break;
            iteration ++
        }
    genDestroyList()
    roomNumber ++
}

ds_list_destroy(roomList)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fill

roomList = ds_list_create()
ds_list_add(roomList, obj_consume_blockout)
ds_list_add(roomList, obj_consume_blockout)
ds_list_add(roomList, obj_alter_blockout)

roomNumber = 0

repeat(ds_list_size(roomList))
{
    roomObject = ds_list_find_value(roomList, roomNumber)
    
    maxX = 8; 
    maxY = 8;
     
    
    genCreatePairList(maxX, maxY)
    iteration = 0
    go = true
    while(go)
    {
        pair = ds_list_find_value(pairList, iteration)
        ix = pair.x * 594
        iy = pair.y * 594
        
        object = instance_create(ix, iy, roomObject)
        with object
            if place_meeting(x, y, obj_gen_room) or place_meeting(x+1, y+1, obj_level_macro)
                instance_destroy()
            else
                other.go = false  
                
        if go = false or (iteration &gt;= 41)
            break;
        iteration ++
    }
    genDestroyList()
    roomNumber ++
}

ds_list_destroy(roomList)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Misc

if instance_exists(obj_wall_corner)
{
    with obj_wall_corner
    {
        largeRoom = 0
        if !place_meeting(x+54, y, obj_hor_wall)
            largeRoom ++
        if !place_meeting(x-54, y, obj_hor_wall)
            largeRoom ++
        if !place_meeting(x, y+54, obj_vert_wall)
            largeRoom ++
        if !place_meeting(x, y-54, obj_vert_wall)
            largeRoom ++
            
        if largeRoom = 4 and !place_meeting(x+2, y+2, obj_level_macro)
            instance_destroy()
    }
}

with obj_gen_wall
    if place_meeting(x, y, obj_gen_room)
        instance_destroy()
        
with obj_wall_corner
    if place_meeting(x, y, obj_gen_room)
        instance_destroy()
        
with obj_empty_blockout
{
    if place_meeting(x, y, obj_level_macro) or place_meeting(x, y, obj_gen_room)
        instance_destroy()
}
        
with obj_gen_room
    image_index = 1
    
with obj_gen_wall
    if place_meeting(x, y, obj_gen_room)
        instance_destroy()

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Determine Viable
testGrid = mp_grid_create(0, 0, 4806/54, 4806/54, 54, 54)
mp_grid_add_instances(testGrid, obj_gen_wall, true)
mp_grid_add_instances(testGrid, obj_gen_room, true)
mp_grid_add_instances(testGrid, obj_level_macro, true)
mp_grid_add_instances(testGrid, obj_wall, true)
mp_grid_add_instances(testGrid, obj_wall_corner, true)


path = path_add()
navPointList = ds_list_create()

with obj_gen_navpoint
    ds_list_add(other.navPointList, id)

bad = 0
i = 0

repeat(ds_list_size(navPointList))
{
    navPoint = ds_list_find_value(navPointList, i)
    ix = navPoint.x
    iy = navPoint.y

    j = 0
    if !mp_grid_path(testGrid, path, obj_start_blockout.x + 162, obj_start_blockout.y + 162, ix, iy, 0)
        bad += 1
    
    i++
    
    
    if bad &gt; 6
    {
        room_restart()
        break
    }
}

//show_debug_message(string(bad))

if bad &lt;= 6
alarm[1] = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with obj_entrance1
    instance_destroy()
with obj_entrance2
    instance_destroy()
with obj_entrance3
    instance_destroy()
with obj_entrance4
    instance_destroy()
    

with obj_entrance1alt
    instance_destroy()
with obj_entrance2alt
    instance_destroy()
with obj_entrance3alt
    instance_destroy()
with obj_entrance4alt
    instance_destroy()
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Spawn Player Objects
s = obj_start_blockout
if global.mp = 0
{
    if !instance_exists(obj_player1)
        instance_create(s.x + 324, s.y + 324, obj_player1)
    with obj_player1
    {
        x = other.s.x + 324
        y = other.s.y + 324
    }
}
else
{
    if !instance_exists(obj_player1)
        instance_create(s.x + 324, s.y + 324, obj_player1)
    if !instance_exists(obj_player2)
        instance_create(s.x + 324, s.y + 324, obj_player2)
        
    with obj_player1
    {
        x = other.s.x + 324 - 54
        y = other.s.y + 324
    }
    
    with obj_player2
    {
        x = other.s.x + 324 + 54
        y = other.s.y + 324
    }
}

if !instance_exists(obj_camera)
instance_create(s.x + 324, s.y + 324, obj_camera)

global.generation = 0
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Coins
instance_activate_object(obj_barrel)

if global.mp = 0
    coins = 90
else
    coins = 140

repeat(90)
{
    with instance_find(obj_barrel, irandom(instance_number(obj_barrel) - 1))
    {
        coins += 1
    }
}

global.generation = 0
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Background

if global.level = 1
    tile = back_level1
    
if global.level = 2
    tile = back_level2
    
if global.level = 3
    tile = back_level3
    
if global.level = 4
    tile = back_level4


i = 0
repeat(89)
{
    j = 0
    repeat(89)
    {
        j++
        k = 0
        
        if global.level = 1
            if irandom(3) = 0
                k = (irandom(4) + 1)
        tile_add(tile,k*54, 0, 54, 54, i*54, j*54, 1000)
    }
 
    i++   
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fix
i = 0
    
repeat(ds_list_size(navPointList))
{
    navPoint = ds_list_find_value(navPointList, i)
    ix = navPoint.x
    iy = navPoint.y

    j = 0
    k = 0
    while !mp_grid_path(testGrid, path, 162, 162, ix, iy, 0)
    {
        with instance_nth_nearest(ix, iy, obj_gen_wall, j)
        {
            if image_index = 0
            {
                image_index = 1
                mp_grid_clear_rectangle(other.testGrid, x+1, y+1, x + sprite_width - 1, y + sprite_height - 1)
                other.k++
            }
        }
        j++
        
        if k = 5 
            show_debug_message("fail")
        
        if k = 9
            show_debug_message("fail2")
            
        if k = 32
            show_debug_message("fail3") 
        
        if j = 32
        {
            break
            room_restart()
        }

    }
    
    show_debug_message("reached" + string(i))
    
    i++
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Misc Room Type
layout = ds_list_create()
ds_list_add(layout, 2)
ds_list_add(layout, 3)
with obj_misc_room
{
    ds_list_shuffle(other.layout)
    i = 0
    possible = 0
    repeat(2)
    {
        image_index = ds_list_find_value(other.layout, i)
        if is_possible()
        {
            possible = 1
            break;
        }
    }
    
    if possible = 0
        image_index = 1
}

ds_list_destroy(layout)


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fix border walls
with(obj_hor_wall)
    if place_meeting(x, y-54, obj_level_macro)
        image_index = 0
    
with(obj_vert_wall)
    if place_meeting(x-54, y, obj_level_macro)
        image_index = 0
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Floor Type
global.titleTimer = sec * 4.5
global.generation = 1

if global.level = 1
{
    global.levelVariant = irandom(1)
    if global.levelVariant = 0
        global.levelName = "Windswept Dunes"
    if global.levelVariant = 1
        global.levelName = "Sandstorm Cliffs"
}

if global.level = 2
{
    global.levelVariant = choose(0, 1)
    if global.levelVariant = 0
        global.levelName = "Thistle Gardens"
    if global.levelVariant = 1
        global.levelName = "Leafy Labrynth"
}

if global.level = 3
{
    global.levelVariant = 0
    global.levelName = "Level 3"
}
if global.level = 4
{
    global.levelVariant = 0
    global.levelName = "Level 4"
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Room Types
temp = ds_list_create()
floor11List = ds_list_create()
if global.level = 1
{
    if global.levelVariant = 0
    {
        ds_list_add(temp, "arena1_1")
        ds_list_add(temp, "arena1_2")
        ds_list_add(temp, "arena1_3")
        ds_list_shuffle(temp)
        ds_list_add(floor11List, temp[| 0])
        ds_list_add(floor11List, temp[| 1])
        ds_list_clear(temp)
        ds_list_add(temp, "arena1_4g")
        ds_list_add(temp, "arena1_5g")
        ds_list_add(temp, "arena1_6g")
        ds_list_shuffle(temp)
        ds_list_add(floor11List, temp[| 0])
    }
    if global.levelVariant = 1
    {
        ds_list_add(temp, "arena1_4")
        ds_list_add(temp, "arena1_5")
        ds_list_add(temp, "arena1_6")
        ds_list_shuffle(temp)
        ds_list_add(floor11List, temp[| 0])
        ds_list_add(floor11List, temp[| 1])
        ds_list_clear(temp)
        ds_list_add(temp, "arena1_1g")
        ds_list_add(temp, "arena1_2g")
        ds_list_add(temp, "arena1_3g")
        ds_list_shuffle(temp)
        ds_list_add(floor11List, temp[| 0])
    }
}
if global.level = 2
{
    if global.levelVariant = 0
    {
        ds_list_add(temp, "arena2_1")
        ds_list_add(temp, "arena2_2")
        ds_list_add(temp, "arena2_3")
        ds_list_shuffle(temp)
        ds_list_add(floor11List, temp[| 0])
        ds_list_add(floor11List, temp[| 1])
        ds_list_clear(temp)
        ds_list_add(temp, "arena2_4g")
        ds_list_add(temp, "arena2_5g")
        ds_list_add(temp, "arena2_6g")
        ds_list_shuffle(temp)
        ds_list_add(floor11List, temp[| 0])
    }
    if global.levelVariant = 1
    {
        ds_list_add(temp, "arena2_4")
        ds_list_add(temp, "arena2_5")
        ds_list_add(temp, "arena2_6")
        ds_list_shuffle(temp)
        ds_list_add(floor11List, temp[| 0])
        ds_list_add(floor11List, temp[| 1])
        ds_list_clear(temp)
        ds_list_add(temp, "arena2_1g")
        ds_list_add(temp, "arena2_2g")
        ds_list_add(temp, "arena2_3g")
        ds_list_shuffle(temp)
        ds_list_add(floor11List, temp[| 0])
    }
}
if global.level = 3
{
        ds_list_add(temp, "arena3_1")
        ds_list_add(temp, "arena3_2")
        ds_list_add(temp, "arena3_3")
        ds_list_shuffle(temp)
        ds_list_add(floor11List, temp[| 0])
        ds_list_add(floor11List, temp[| 1])
        ds_list_add(floor11List, temp[| 2])
}
if global.level = 4
{
        ds_list_add(temp, "arena1_1g")
        ds_list_add(temp, "arena1_2g")
        ds_list_add(temp, "arena1_3g")
        ds_list_add(temp, "arena1_4g")
        ds_list_add(temp, "arena1_5g")
        ds_list_add(temp, "arena1_6g")
        ds_list_add(temp, "arena2_1g")
        ds_list_add(temp, "arena2_2g")
        ds_list_add(temp, "arena2_3g")
        ds_list_add(temp, "arena2_4g")
        ds_list_add(temp, "arena2_5g")
        ds_list_add(temp, "arena2_6g")
        ds_list_add(temp, "arena3_1")
        ds_list_add(temp, "arena3_2")
        ds_list_add(temp, "arena3_3")
        ds_list_shuffle(temp)
        ds_list_add(floor11List, temp[| 0])
        ds_list_add(floor11List, temp[| 1])
        ds_list_add(floor11List, temp[| 2])
}

ds_list_shuffle(floor11List)
ds_list_destroy(temp)

singleHybridList = ds_list_create()
ds_list_add(singleHybridList, "misc_single_hybrid1")
ds_list_add(singleHybridList, "misc_single_hybrid2")
ds_list_add(singleHybridList, "misc_single_hybrid3")
ds_list_add(singleHybridList, "misc_single_hybrid4")
ds_list_add(singleHybridList, "misc_single_hybrid5")
ds_list_add(singleHybridList, "misc_single_hybrid6")
ds_list_add(singleHybridList, "misc_single_hybrid7")
ds_list_add(singleHybridList, "misc_single_hybrid8")
ds_list_add(singleHybridList, "misc_single_hybrid9")
ds_list_add(singleHybridList, "misc_single_hybrid10")
ds_list_add(singleHybridList, "misc_single_hybrid11")
ds_list_add(singleHybridList, "misc_single_hybrid12")
ds_list_add(singleHybridList, "misc_single_hybrid13")
ds_list_add(singleHybridList, "misc_single_hybrid14")
ds_list_add(singleHybridList, "misc_single_hybrid15")
ds_list_add(singleHybridList, "misc_single_hybrid16")
ds_list_add(singleHybridList, "misc_single_hybrid17")
ds_list_add(singleHybridList, "misc_single_hybrid18")
ds_list_add(singleHybridList, "misc_single_hybrid19")

singleClosedList = ds_list_create()
ds_list_add(singleHybridList, "misc_single_hybrid3")
ds_list_add(singleClosedList, "misc_single_closed1")
ds_list_add(singleClosedList, "misc_single_closed2")
ds_list_add(singleClosedList, "misc_single_closed3")
ds_list_add(singleClosedList, "misc_single_closed4")
ds_list_add(singleClosedList, "misc_single_closed5")
ds_list_add(singleClosedList, "misc_single_closed6")
ds_list_add(singleClosedList, "misc_single_closed7")
ds_list_add(singleClosedList, "misc_single_closed8")
ds_list_add(singleClosedList, "misc_single_closed9")
ds_list_add(singleClosedList, "misc_single_closed10")


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Loot
ds_list_shuffle(global.weaponLoot)
ds_list_shuffle(global.normalLoot)

global.normalLootI = 0
global.weaponLootI = 0
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Populate Rooms

//Required
ds_list_shuffle(floor11List)
i = 0
with obj_arena_blockout
{
    roomType = ds_list_find_value(other.floor11List, other.i)
    scr_arena_create(x, y, roomType)
    other.i++
    visible = 0   
}
ds_list_destroy(floor11List)

with obj_start_blockout
{
    scr_arena_create(x, y, "start")
    visible = 0   
}
with obj_end_blockout
{
    scr_arena_create(x, y, "leave")
    visible = 0   
}
with obj_store_blockout
{
    shop = choose("shop1", "shop2", "shop3")

    scr_arena_create(x, y, shop)
    visible = 0   
}

with obj_consume_blockout
{
    scr_arena_create(x, y, "consumables")
    visible = 0   
}
with obj_alter_blockout
{
    scr_arena_create(x, y, "altar")
    visible = 0   
}



//Misc
if instance_exists(obj_misc_blockout1)
{
    with obj_misc_blockout1
    {
        scr_arena_create(x, y, "misc_hor_generic1")
        visible = 0
        
        if image_index = 2
        {
            with obj_entrance1alt
                if parent = other
                {
                    instance_create(x, y, obj_wall)
                    instance_destroy()
                }
                    
            with obj_entrance4alt
                if parent = other
                    {
                        instance_create(x, y, obj_wall)
                        instance_destroy()
                    }
        }
        
        if image_index = 3
        {
            with obj_entrance1
                if parent = other
                    {
                        instance_create(x, y, obj_wall)
                        instance_destroy()
                    }
                    
            with obj_entrance4
                if parent = other 
                    {
                        instance_create(x, y, obj_wall)
                        instance_destroy()
                    }
        }
    }
}

if instance_exists(obj_misc_blockout2)
{
    with obj_misc_blockout2
    {
        scr_arena_create(x, y, "misc_vert_generic1")
        visible = 0
        
        if image_index = 2
        {
            with obj_entrance2alt
                if parent = other
                {
                    instance_create(x, y, obj_wall)
                    instance_destroy()
                }
                    
            with obj_entrance3alt
                if parent = other
                    {
                        instance_create(x, y, obj_wall)
                        instance_destroy()
                    }
        }
        
        if image_index = 3
        {
            with obj_entrance2
                if parent = other
                    {
                        instance_create(x, y, obj_wall)
                        instance_destroy()
                    }
                    
            with obj_entrance3
                if parent = other 
                    {
                        instance_create(x, y, obj_wall)
                        instance_destroy()
                    }
        }
    }
}

if instance_exists(obj_misc_blockout3)
{
    with obj_misc_blockout3
    {
        scr_arena_create(x, y, "misc_square_generic1")
        visible = 0
        
        if image_index = 2
        {
            with obj_entrance1alt
                if parent = other
                {
                    instance_create(x, y, obj_wall)
                    instance_destroy()
                }
            with obj_entrance2alt
                if parent = other
                {
                    instance_create(x, y, obj_wall)
                    instance_destroy()
                }
                    
            with obj_entrance3alt
                if parent = other
                    {
                        instance_create(x, y, obj_wall)
                        instance_destroy()
                    }
            with obj_entrance4alt
                if parent = other
                {
                    instance_create(x, y, obj_wall)
                    instance_destroy()
                }
        }
        
        if image_index = 3
        {
            with obj_entrance1
                if parent = other
                    {
                        instance_create(x, y, obj_wall)
                        instance_destroy()
                    }
        
            with obj_entrance2
                if parent = other
                    {
                        instance_create(x, y, obj_wall)
                        instance_destroy()
                    }
                    
            with obj_entrance3
                if parent = other 
                    {
                        instance_create(x, y, obj_wall)
                        instance_destroy()
                    }
                    
            with obj_entrance4
                if parent = other 
                    {
                        instance_create(x, y, obj_wall)
                        instance_destroy()
                    }
        }
    }
}

//Walls
with obj_hor_wall
{
    i = 0
    repeat 10
    {
        with instance_create(x + i, y, obj_wall)
            if !place_meeting(x, y, obj_hor_wall)
                instance_destroy()
        i += 54
    }
    
    instance_destroy()
}

with obj_vert_wall
{
    i = 0
    repeat 10
    {
        with instance_create(x, y + i, obj_wall)
            if !place_meeting(x, y, obj_vert_wall)
                instance_destroy()
        i += 54
    }
    
    instance_destroy()
}

with obj_wall_corner
{
    instance_create(x, y, obj_wall)
    
    if place_meeting(x + 2, y + 2, obj_level_macro)
    {
        i = 0
        repeat(11)
        {
            j = 0
            repeat(11)
            {
                instance_create(x + (i * 54), y + (j * 54), obj_wall)
                j++
            }
            i++
        }
    }
}

//Empty
with obj_empty_blockout
{
    roomSelect = ds_list_create()

    deadend = 0
    open = 0
    
    if collision_point(x+270, y - 27, obj_gen_wall, 1, 1) or collision_point(x+270, y - 27, obj_wall, 1, 1)//Top
        deadend += 1    
    if collision_point(x+540+27, y+270, obj_gen_wall, 1, 1) or  collision_point(x+540+27, y+270, obj_wall, 1, 1)//Right
        deadend += 1
    if collision_point(x+270, y+540+27, obj_gen_wall, 1, 1) or collision_point(x+270, y+540+27, obj_wall, 1, 1)//Bottom
        deadend += 1
    if collision_point(x-27, y+270, obj_gen_wall, 1, 1) or collision_point(x-27, y+270, obj_wall, 1, 1)//Left
        deadend += 1
        
    if !collision_point(x+160, y - 27, obj_gen_wall, 1, 1) and !collision_point(x+160, y - 27, obj_wall, 1, 1)
        open = 1  
    if !collision_point(x+540+27, y+160, obj_gen_wall, 1, 1) and !collision_point(x+540+27, y+160, obj_wall, 1, 1)
        open = 1
    if !collision_point(x+160, y+540+27, obj_gen_wall, 1, 1) and !collision_point(x+160, y+540+27, obj_wall, 1, 1)
        open = 1
    if !collision_point(x-27, y+160, obj_gen_wall, 1, 1) and !collision_point(x-27, y+160, obj_wall, 1, 1)
        open = 1
    
    if deadend = 3
    {
        if open = 0
            roomType = "misc_single_deadend1"
        else
            roomType = "misc_single_deadend2"
    }
    else
    {
        addListToList(roomSelect, other.singleHybridList)
        if open = 0
            addListToList(roomSelect, other.singleClosedList)
        ds_list_shuffle(roomSelect)
        roomType = ds_list_find_value(roomSelect, 0)
    }
    
    if irandom(9) &lt;= 2 and deadend != 3
        roomType = "misc_single_hybrid3"
    
    scr_arena_create(x, y, roomType)
    visible = 0
    
    ds_list_destroy(roomSelect)
}

ds_list_destroy(singleHybridList)
ds_list_destroy(singleClosedList)

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fill Blocked Entrances
with obj_entrance1
    if place_meeting(x, y, obj_wall) or place_meeting(x, y-16, obj_level_macro)
        with obj_entrance1
            if parent = other.parent
                instance_change(obj_wall, true)
        
        
with obj_entrance2
    if place_meeting(x, y, obj_wall) or place_meeting(x-16, y, obj_level_macro)
        with obj_entrance2
            if parent = other.parent
                instance_change(obj_wall, true)
        
with obj_entrance3
    if place_meeting(x, y, obj_wall) or place_meeting(x, y, obj_level_macro)
        with obj_entrance3
            if parent = other.parent
                instance_change(obj_wall, true)
        
with obj_entrance4
    if place_meeting(x, y, obj_wall) or place_meeting(x, y, obj_level_macro)
        with obj_entrance4
            if parent = other.parent
                instance_change(obj_wall, true)


if instance_exists(obj_entrance1alt)
    with obj_entrance1alt
        if place_meeting(x, y, obj_wall) or place_meeting(x, y-16, obj_level_macro)
            with obj_entrance1alt
                if parent = other.parent
                    instance_change(obj_wall, true)

if instance_exists(obj_entrance2alt)
    with obj_entrance2alt
        if place_meeting(x, y, obj_wall) or place_meeting(x, y-16, obj_level_macro)
            with obj_entrance2alt
                if parent = other.parent
                    instance_change(obj_wall, true)
                    
if instance_exists(obj_entrance3alt)
    with obj_entrance3alt
        if place_meeting(x, y, obj_wall) or place_meeting(x, y-16, obj_level_macro)
            with obj_entrance3alt
                if parent = other.parent
                    instance_change(obj_wall, true)
                    
if instance_exists(obj_entrance4alt)
    with obj_entrance4alt
        if place_meeting(x, y, obj_wall) or place_meeting(x, y-16, obj_level_macro)
            with obj_entrance4alt
                if parent = other.parent
                    instance_change(obj_wall, true)
                
                
alarm[2] = 2
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if grid = 1
{
    draw_set_alpha(0.4)
    mp_grid_draw(testGrid)
}
draw_set_alpha(1)*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>mp_grid_destroy(testGrid)
if instance_number(obj_arena_blockout) = 3
    room_restart()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="71">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(grid)
{
    case 0: obj_misc_blockout1.visible = 1; grid = 1;  break
    case 1: obj_misc_blockout1.visible = 0; grid = 0;  break
}
 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>game_end()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
