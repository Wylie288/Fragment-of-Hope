<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables
///Variables
//Move
baseSpeed = 3.5
baseAccel = 0.5
baseDeAccel = 0.5
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init
image_speed = 0

inputHor = 0
inputVert = 0
moveHor = 0
moveVert = 0
moveSpeed = baseSpeed
xSpeed = 0
ySpeed = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Input
if global.input = "kbm"
{
    inputRawHor = -getInput(global.b_left) + getInput(global.b_right)
    inputRawVert = -getInput(global.b_up) + getInput(global.b_down)
    
    tempDir = point_direction(0, 0, inputRawHor, inputRawVert)
    tempSpeed = max(abs(inputRawHor), abs(inputRawVert))
    
    inputHor = lengthdir_x(tempSpeed, tempDir)
    inputVert = lengthdir_y(tempSpeed, tempDir)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement Acceleration
allowAccel = false

if allowAccel
{
    if inputHor != 0
        moveHor += sign(inputHor) * baseAccel
    else
        moveHor = toZero(moveHor, baseDeAccel)
    moveHor = clamp(moveHor, -baseSpeed, baseSpeed)
    
    if inputVert != 0
        moveVert += sign(inputVert) * baseAccel
    else
        moveVert = toZero(moveVert, baseDeAccel)
    moveVert = clamp(moveVert, -baseSpeed, baseSpeed)
}
else
{
    moveHor = inputHor * moveSpeed 
    moveVert = inputVert * moveSpeed 
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Speed
xSpeed = moveHor
ySpeed = moveVert
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move
var allowCornerCut = false
var corner = 0
var cornerSize = 16
var iterate = 1


if !place_meeting(x+xSpeed, y, obj_solid)
    x += xSpeed
else 
{
    //Corner
    if (!place_meeting(x+xSpeed, y+cornerSize, obj_solid) or !place_meeting(x+xSpeed, y-cornerSize, obj_solid)) and allowCornerCut
    {
        i = iterate
        repeat((cornerSize/iterate) - 1)
        {
            if !place_meeting(x+xSpeed, y+i, obj_solid)
            {
                x += xSpeed
                y += i
                corner = 1
                break
            }
            if !place_meeting(x+xSpeed, y-i, obj_solid)
            {
                x += xSpeed
                y -= i
                corner = 1
                break
            }
            i += iterate
        }
    }
    
    //Close gap
    if corner = 0
    {
        while(!place_meeting(x+xSpeed, y, obj_solid))
            x += sign(xspeed)
    }
}

if !place_meeting(x, y+ySpeed, obj_solid)
    y += ySpeed
else if allowCornerCut
{   
    ///Corner
    if (!place_meeting(x+cornerSize, y+ySpeed, obj_solid) or !place_meeting(x-cornerSize, y+ySpeed, obj_solid)) and allowCornerCut
    {
        i = iterate
        repeat((cornerSize/iterate) - 1)
        {
            if !place_meeting(x+i, y+ySpeed, obj_solid)
            {
                y += ySpeed
                x += i
                corner = 1
                break
            }
            if !place_meeting(x-i, y+ySpeed, obj_solid)
            {
                y += ySpeed
                x -= i
                corner = 1
                break
            }
            i += iterate
        }
    }
    
    //Close gap
    if corner = 0
    {
        while(!place_meeting(x, y+ySpeed, obj_solid))
            y += sign(ySpeed)
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
